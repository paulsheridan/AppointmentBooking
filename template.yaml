AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.12

  Sample SAM Template for Appointment Appointment

Globals:
  Function:
    Timeout: 60
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

Parameters:
  Stage:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
  AppName:
    Type: String
    Default: Appointments
  CognitoUserEmail:
    Type: String
  ClientDomains:
    Type: CommaDelimitedList
    Default: http://localhost:8080,localhost:8080

Resources:
  AppointmentApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AppName}-${Stage}-API"
      StageName: !Ref Stage
      TracingEnabled: true
      Cors: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub GetUser-${Stage}
      CodeUri: handlers/get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        AppointmentApi:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
            RestApiId:
              Ref: AppointmentApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Layers:
      - !Ref Services

  ListClientsByUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ListClientsByUser-${Stage}
      CodeUri: handlers/list_clients_by_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
          TABLE_NAME: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /clients
            Method: get
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Layers:
      - !Ref Services

  RequestAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub RequestAppointment-${Stage}
      CodeUri: handlers/request_appointment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /appointments
            Method: post
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Layers:
      - !Ref Services

  # GetAppointmentFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: handlers/appointments/get_appointment/
  #     Handler: app.lambda_handler
  #     Runtime: python3.12
  #     Environment:
  #       Variables:
  #         STAGE: !Ref Stage
  #     Events:
  #       AppointmentApi:
  #         Type: Api
  #         Properties:
  #           Path: /appointments/{id}
  #           Method: get
  #           RestApiId:
  #             Ref: AppointmentApi
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref AppointmentsTable
  #     Layers:
  #     - !Ref Services

  # ListAppointmentsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: handlers/appointments/list_appointments/
  #     Handler: app.lambda_handler
  #     Runtime: python3.12
  #     Environment:
  #       Variables:
  #         STAGE: !Ref Stage
  #     Events:
  #       AppointmentApi:
  #         Type: Api
  #         Properties:
  #           Path: /appointments
  #           Method: get
  #           RestApiId:
  #             Ref: AppointmentApi
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref AppointmentsTable

  ConfirmAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ConfirmAppointment-${Stage}
      CodeUri: handlers/confirm_appointment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        AppointmentApi:
          Type: Api
          Properties:
            Path: /appointments/{id}
            Method: patch
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable

  CancelAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CancelAppointment-${Stage}
      CodeUri: handlers/cancel_appointment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        AppointmentApi:
          Type: Api
          Properties:
            Path: /appointments/{id}
            Method: delete
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable

  CreateClient:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CreateClient-${Stage}
      CodeUri: handlers/create_client/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
          TABLE_NAME: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /clients
            Method: post
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Layers:
      - !Ref Services

  GetClient:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub GetClient-${Stage}
      CodeUri: handlers/get_client/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STAGE: !Ref Stage
          TABLE_NAME: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /clients
            Method: get
            RestApiId:
              Ref: AppointmentApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Layers:
      - !Ref Services

  Services:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: services/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AppName}-${Stage}-Table"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSI1PK"
          AttributeType: "S"
        - AttributeName: "GSI1SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: 'GSI1'
          KeySchema:
          - AttributeName: "GSI1PK"
            KeyType: "HASH"
          - AttributeName: "GSI1SK"
            KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-${Stage}-UserPool"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${AppName}-${Stage}-UserPoolClient"
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub appointments-${AWS::AccountId}
      UserPoolId: !Ref CognitoUserPool

  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserEmail
      UserPoolId: !Ref CognitoUserPool

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  AuthUrl:
    Description: "URL for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
